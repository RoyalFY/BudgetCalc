{"mappings":"AAAA,IAAI,OAAO,IAAI;AAEf,IAAI,QAAQ,CAAC,GAAG,8CAA8C;AAE9D,0CAA0C;AAC1C,MAAM,GAAG,GAAG,CAAC;IAET,sBAAsB;IACtB,OAAO,IAAI,QAAQ,SAAU,OAAO,EAAE,MAAM;QAExC,oCAAoC;QACpC,IAAI,UAAU,IAAI;QAElB,wBAAwB;QACxB,QAAQ,IAAI,CAAC,OAAO;QAEpB,QAAQ,MAAM,GAAG;YACb,oBAAoB;YACpB,IAAI,QAAQ,MAAM,IAAI,KAAK;gBACvB,QAAQ,GAAG,CAAC;gBACZ,QAAQ,QAAQ,QAAQ;YAC5B,OAGI,OAAO,MAAM,CAAC,mBAAmB,EAAE,QAAQ,MAAM,CAAC,CAAC;QAE3D;QACA,uBAAuB;QACvB,QAAQ,OAAO,GAAG,SAAU,KAAK;YAC7B,OAAO,MAAM,CAAC,mBAAmB,EAAE,IAAI,EAAE,EAAE,MAAM,CAAC;QACtD;QACA,kBAAkB;QAClB,QAAQ,IAAI;IAChB,IAAI,oBAAoB;AAC5B;AAEA,mDAAmD;AACnD,MAAM,OAAO,GAAG,eAAgB,GAAG;IAC/B,IAAI,SAAS;IACb,qCAAqC;IACrC,IAAI;QACA,SAAS,MAAM,MAAM,GAAG,CAAC;IAC7B,EACA,OAAO,OAAO;QACV,QAAQ,GAAG,CAAC;IAChB;IACA,2CAA2C;IAC3C,IAAI,OAAO,KAAK,KAAK,CAAC;IACtB,OAAO;AACX;AAEA,eAAe;IACX,2DAA2D;IAC3D,IAAI,MAAM;IAEV,yCAAyC;IACzC,IAAI,cAAc;IAElB,+CAA+C;IAC/C,IAAI;QACA,wCAAwC;QACxC,cAAc,MAAM,MAAM,OAAO,CAAC;IACtC,EACA,uDAAuD;IACvD,OAAM,OAAM;QACZ,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC;IAC7B;IAEA,iCAAiC;IACjC,UAAU;AACd;AAEA,SAAS,UAAU,IAAI;IAEvB,IAAI,cAAc,SAAS,cAAc,CAAC,CAAC,IAAI,CAAC;IAEhD,KAAK,IAAI,KAAK,KACV,KAAK,GAAG,CAAC,EAAE,UAAU,EAAE,EAAE,MAAM;IAGnC,KAAK,OAAO,CAAC,CAAC,MAAK;QAAU,YAAY,SAAS,IAAI,CAAC,eAAe,EAAE,KAAK,EAAE,EAAE,KAAK,SAAS,CAAC;IAAA;AAEhG","sources":["dookie.js"],"sourcesContent":["let list = new Map()\r\n\r\nlet utils = {}; //create a namespace for our utility functions\r\n\r\n//get function to make an HTTP GET request\r\nutils.get = (url) => {\r\n\r\n    //start promise object\r\n    return new Promise(function (resolve, reject) {\r\n\r\n        //create a new XMLHttpRequest object\r\n        let request = new XMLHttpRequest();\r\n\r\n        //initialize the request\r\n        request.open('GET', url);\r\n\r\n        request.onload = function () {\r\n            //resolve on success\r\n            if (request.status == 200) { // HTTP: OK\r\n                console.log('Response OK');\r\n                resolve(request.response);\r\n            }\r\n            //reject on error\r\n            else {\r\n                reject(Error(`promise error with ${request.status}`))\r\n            }\r\n        };\r\n        //handle network errors\r\n        request.onerror = function (error) {\r\n            reject(Error(`Network Error with ${url}: ${error}`))\r\n        };\r\n        //send the request\r\n        request.send();\r\n    }); //end Promise Object\r\n}\r\n\r\n//getJSON function to get JSON data from the server\r\nutils.getJSON = async function (url) {\r\n    let string = null;\r\n    //get the JSON string from the server\r\n    try {\r\n        string = await utils.get(url);\r\n    }\r\n    catch (error) {\r\n        console.log(error)\r\n    }\r\n    //parse the JSON string and return the data\r\n    let data = JSON.parse(string);\r\n    return data;\r\n}\r\n\r\nasync function init() {\r\n    //create a variable to hold the URL of the JSON data source\r\n    let url = 'https://eecu-data-server.vercel.app/data/2024';\r\n\r\n    //create a variable to hold the JSON data\r\n    let occupations = null; \r\n    \r\n    //try to retrieve the JSON data from the server\r\n    try {\r\n        //retrieve the JSON data from the server\r\n        occupations = await utils.getJSON(url);\r\n    }\r\n    //catch any errors and display them in the root element\r\n    catch(error){\r\n    console.log(`error: ${error}`);\r\n    }\r\n\r\n    //show JSON data on the html page\r\n    buildList(occupations);\r\n}\r\n\r\nfunction buildList(jobs) {\r\n\r\nlet marioMaker2 = document.getElementById(`jobs`)\r\n\r\nfor (let i of jobs) {\r\n    list.set(i.occupation, i.salary)\r\n}\r\n\r\nlist.forEach((fort,nite) => {marioMaker2.innerHTML += `<option value=\"${fort}\">${nite}</option>`})\r\n\r\n}\r\n"],"names":[],"version":3,"file":"index.4156c03c.js.map","sourceRoot":"/__parcel_source_root/"}